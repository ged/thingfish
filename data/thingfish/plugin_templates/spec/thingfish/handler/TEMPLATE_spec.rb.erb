#!/usr/bin/env ruby

BEGIN {
	require 'pathname'
	plugindir = Pathname.new( __FILE__ ).dirname.parent.parent.parent
	pluginlibdir = plugindir + 'lib'

	basedir = plugindir.parent.parent
	libdir = basedir + 'lib'

	$LOAD_PATH.unshift( pluginlibdir ) unless $LOAD_PATH.include?( pluginlibdir )
	$LOAD_PATH.unshift( basedir ) unless $LOAD_PATH.include?( basedir )
	$LOAD_PATH.unshift( libdir ) unless $LOAD_PATH.include?( libdir )
}

require 'rspec'

require 'spec/lib/helpers'
require 'spec/lib/handler_behavior'

require 'pathname'
require 'stringio'

require 'thingfish/constants'
require 'thingfish/handler/<%= @name %>'
require 'thingfish/exceptions'


include ThingFish::Constants,
		ThingFish::TestConstants,
		ThingFish::SpecHelpers


#####################################################################
###	C O N T E X T S
#####################################################################

describe ThingFish::<%= @name.capitalize %>Handler do

	before( :all ) do
		setup_logging( :fatal )
		@basedir = Pathname.new( __FILE__ ).dirname.parent.parent.parent
	end
		
	before(:each) do
		resdir = @basedir + 'resources'
	    @handler  = ThingFish::Handler.create( '<%= @name %>', 'resource_dir' => resdir )
		@request  = mock( "request" ).as_null_object
		@response = mock( "response" ).as_null_object

		@request_headers  = mock( "request headers" ).as_null_object
		@request.stub!( :headers ).and_return( @request_headers )
		@response_headers  = mock( "response headers" ).as_null_object
		@response.stub!( :headers ).and_return( @response_headers )
		@response_data  = mock( "response data" ).as_null_object
		@response.stub!( :data ).and_return( @response_data )

		@daemon = mock( "daemon object" ).as_null_object
		@handler.on_startup( @daemon )
	end

	after( :all ) do
		reset_logging()
	end

	

	### Shared behaviors
	it_should_behave_like "a handler"

	
	### Implementation-specific Examples
	it "is well tested"

end

# vim: set nosta noet ts=4 sw=4:
