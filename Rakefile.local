#!rake
# coding: utf-8

require 'tmpdir'

# ThingFish-specific Rakefile overrides
#   The entrypoint into this file from the main Rakefile is the 'local' task,
#   which is included as a dependency from the main default task.


# ThingFish-specific directory structure
MISCDIR          = BASEDIR + 'misc'

# Plugin constants
PLUGINDIR        = BASEDIR + 'plugins'
PLUGINS          = Pathname.glob( PLUGINDIR + '*' ).select {|path| path.directory? }
PLUGIN_LIBS      = Rake::FileList.new
PLUGIN_RAKEFILES = Rake::FileList.new
PLUGIN_SPECFILES = Rake::FileList.new
PLUGINS.each do |dir|
	PLUGIN_LIBS.include( dir + 'lib/**/*.rb' )
	PLUGIN_RAKEFILES.include( dir + 'Rakefile' )
	PLUGIN_SPECFILES.include( dir + 'spec/**/*_spec.rb' )
end

# Directory to keep benchmarks around in
BENCHMARKDIR = BASEDIR + 'benchmarks'
TESTIMAGE    = MISCDIR + 'testimage.jpg'

CL_XMLSERIAL_DIST = 'http://prdownloads.sourceforge.net/clxmlserial/clxmlserial.1.0.pre4.zip'

#####################################################################
###	T A S K S
#####################################################################


SPEC_FILES.include( PLUGIN_SPECFILES )


### Task: generate ctags
### This assumes exuberant ctags, since ctags 'native' doesn't support ruby anyway.
desc "Generate a ctags 'tags' file from ThingFish source"
task :ctags do
	run %w{ ctags -R lib plugins misc }
end


   # Install cl/xmlfilter
task :install_dev_dependencies do
	workdir = Pathname.new( Dir.tmpdir )
    unzip = which( 'unzip' ) or
		fail "Can't extract downloads: unzip: no such file or directory"

	targetzip = workdir + 'clxmlserial.zip'
	download( CL_XMLSERIAL_DIST, targetzip )
	system( unzip, '-d', workdir, targetzip )
	clxmldir = workdir + 'clxmlserial'
	Dir.chdir( clxmldir ) do
		ruby 'install.rb'
	end
end


begin
	require 'thingfish/benchmarktask'

	namespace :benchmarks do

		file TESTIMAGE.to_s

		desc "Run all benchmarks"
		task :all do |alltask|
			log "Running all benchmark tasks"
			subtasks = Rake::Task.tasks.select {|t| t.name =~ /^benchmarks:/ }
			subtasks.each do |task|
				next if task.name =~ /benchmarks:(all|graphs)/
				trace "  considering invoking task #{task}"
				task.invoke
			end
		end

		desc "Benchmark the default handler in a stripped-down server"
		benchmark :barebones => [TESTIMAGE.to_s] do
			config = ThingFish::Config.new do |config|
				config.ip = '127.0.0.1'
				config.port = 55555
				config.logging.level = 'error'
				config.logging.logfile = 'stderr'
				config.plugins.filestore.maxsize = TESTIMAGE.size * 1000
				config.plugins.urimap = {
					'/metadata' => [{ 'simplemetadata' => {'resource_dir' => 'var/www'} }],
					'/search'   => [{ 'simplesearch'   => {'resource_dir' => 'var/www'} }]
				}
				config.plugins.filters << ['ruby', 'yaml']
			end

			headers = {
				'Accept' => 'text/x-yaml',
				'Accept-Encoding' => 'utf8',
			}

			with_config( config, :count => 500, :concurrency => 5, :headers => headers ) do # DataSet
				resource = prep do |client|
					res = ThingFish::Resource.from_file( TESTIMAGE, :format => 'image/jpeg' )
					res.extent = TESTIMAGE.size
					client.store( res )
					res
				end

				datapoint 'GET /',					:get,  "/"
				datapoint 'GET /«uuid»',			:get,  "/#{resource.uuid}"
				datapoint 'POST /',					:post, '/', :entity_body => TESTIMAGE
				datapoint 'PUT /«uuid»',			:put,  "/#{resource.uuid}", :entity_body => TESTIMAGE
				datapoint 'GET /search',			:get,  '/search?format=image/jpeg'
				datapoint 'GET /metadata/«uuid»',	:get,  "/metadata/#{resource.uuid}"
			end

		end

		desc "Create Gruff graphs for all existing benchmark data"
		task :graphs do
			datafiles = Pathname.glob( BENCHMARKDIR + '**/*.data' )

			datafiles.each do |datafile|
				log "Generating graphs from #{datafile}"
				dataset = Marshal.load( File.open(datafile, 'r') )
				dataset.generate_gruff_graphs( datafile.dirname )
			end
		end

	end
rescue LoadError => err
	task :no_benchmarks do
		$stderr.puts "Benchmark tasks not defined: %s" % [ err.message ]
	end

	namespace :benchmarks do
		task :all => :no_benchmarks
		task :graphs => :no_benchmarks
		task :barebones => :no_benchmarks
	end
end

task :benchmarks => [ 'benchmarks:all' ]
task :bench => :benchmarks


