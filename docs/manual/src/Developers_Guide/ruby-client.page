---
title: "The Ruby Client Library"
layout: default
index: 2
filters:
  - erb
  - examples
  - links
  - textile
---

h2. <%= page.config['title'] %>

<div id="auto-toc"></div>

The <?link ThingFish::Client ?> class is the main Ruby interface to the ThingFish store. It can be
used to upload, download, and query the server for resources:

<?example {  language: ruby, testable: false, caption: Example } ?>
#!/usr/bin/env ruby

require 'thingfish/client'
require 'thingfish/resource'

# Create a new client
client = ThingFish::Client.new( 'http://localhost:3474' )


# Upload a new resource
resource = ThingFish::Resource.from_file( "misc/testimage.jpg" )
resource.format = 'image/jpeg'
client.store( resource )

uuid = resource.uuid                        # =>

# Download a resource
resource = client.fetch( "bd3f8ad6-de54-11db-b3c6-d7f7e9f1ac25" )
resource.inspect                            # => 
resource.format                             # => 
resource.filename                           # => 
resource.write_to_file                      # => 

# Search for resources
entries = client.find( :format => 'image/jpeg', :owner => 'mgranger' )
entries.each {|e| e.write_to_file }
<?end example?>
	

h3. Creating the Client

The first step is to configure the client, which you can do by providing the
connection parameters as either distinct values or a URL:

<?example {  language: ruby, testable: false, caption: Creating the client object  } ?>
require 'thingfish/client'

# Create a new client which will connect to thingfish.laika.com on the 
# default port.
client = ThingFish::Client.new( 'thingfish.laika.com' )

# -or-

client = ThingFish::Client.new( 'http://thingfish.laika.com:3474/' )

# -or-

# Create a client and configure it via attributes
client = ThingFish::Client.new
client.host = 'thingfish.laika.com'
client.port = 5000
client.user = 'mgranger'
client.password = 'myS00perSekrit'

<?end example?>

h3. Storing Data

Once you have a configured client object, you can store data on the server by passing
either the data or a IO object open to the data to the @#store@ method of the client:

<?example {  language: ruby, testable: false, caption: Storing a PNG on the server  } ?>
#!/usr/bin/env ruby

require 'thingfish/client'

client = ThingFish::Client.new( 'thingfish.laika.com' )
resource = client.store( File.open("rss.png"), :format => 'image/png' )

resource.uuid             # => "a52ec552-2c50-11dc-8e32-abc548881c84"

<?end example?>

The @#store@ method returns a @ThingFish::Resource@, which can then be used to query
the object stored on the server for its UUID and any other metadata added to it.


h3. Fetching Resources

fetch resources from the server via their UUID:

<?example {  caption: Fetching a resource by UUID, testable: false, language: ruby  } ?>
require 'thingfish/client'

client = ThingFish::Client.new( 'thingfish.laika.com' )
resource = client.fetch( 'a3f4e060-dffa-11db-a8e7-4bd9759f4985' )

resource.uuid             # => 'a3f4e060-dffa-11db-a8e7-4bd9759f4985'
resource.format           # => 'image/png'
resource.data[0..10]      # => "\211PNG\r\n\032\n\000\000\000"

<?end example?>
