---
title: Getting Started
layout: default
index: 2
filters:
  - erb
  - examples
  - textile
---

h1. <%= page.config['title'] %>

<div id="auto-toc"></div>

h2. Installation

h3. Requirements

ThingFish is written in Ruby, and is tested using version 1.8.7:

* Ruby (>= 1.8.7): "http://www.ruby-lang.org/en/downloads/":http://www.ruby-lang.org/en/downloads/

Other versions may work, but are not tested.

h3. Ruby Modules

There are two ways you can install ThingFish. The easiest is to use RubyGems:

<pre>
  $ <kbd>sudo gem install thingfish</kbd>
</pre>

If you'd rather install from source, you can download and install it yourself manually a couple of
different ways.

h3. Releases

Released source tarballs can be downloaded from:
 
* "http://opensource.laika.com/ThingFish/":http://opensource.laika.com/downloads

h3. Development Sources

If you wish to help with development or just check out the development sources, you can 
do so using Subversion:

* "svn://opensource.laika.com/thingfish/trunk":svn://opensource.laika.com/thingfish/trunk


If you're installing from source, you'll also need to install these:

* PluginFactory (>= 1.0.3): "http://deveiate.org/projects/PluginFactory":http://deveiate.org/projects/PluginFactory
* UUIDTools (>= 1.0.0): "http://rubyforge.org/projects/uuidtools/":http://rubyforge.org/projects/uuidtools/

Once you have those installed, you can install ThingFish like so:

<pre>
  $ <kbd>tar -zxvf thingfish-0.X.N.tgz</kbd>
  $ <kbd>cd thingfish-0.X.N</kbd>
  $ <kbd>su -</kbd>
  # <kbd>rake install</kbd>
</pre>

The dependencies above are enough to run the server, but if you want to help out with development,
run tests, or generate documentation, you'll need a few more things:

* RSpec (>= 1.1.11): "http://rspec.rubyforge.org/":http://rspec.rubyforge.org/
* rcov (>= 0.8.1): "http://eigenclass.org/hiki.rb?rcov":http://eigenclass.org/hiki.rb?rcov
* lockfile (>= 1.4.3): "http://codeforpeople.com/lib/ruby/lockfile/":http://codeforpeople.com/lib/ruby/lockfile/
* rcodetools (>= 0.7.0): "http://eigenclass.org/hiki/rcodetools":http://eigenclass.org/hiki/rcodetools
* Redcloth (>= 3.0.4): "http://whytheluckystiff.net/ruby/redcloth/":http://whytheluckystiff.net/ruby/redcloth/
* ultraviolet (>= 0.10.2): "http://ultraviolet.rubyforge.org/":http://ultraviolet.rubyforge.org/

If you have RubyGems installed, you can install these automatically via the 
@install_dependencies@ task of the Rakefile:

<pre>
  $ <kbd>sudo rake install_dependencies</kbd>
</pre>

h2. Running ThingFish

The server comes with a @thingfishd@ command line program which can be started in 
the usual fashion:

<pre>
  $ <kbd>thingfishd</kbd>
</pre>

The server reads its configuration from a single file called @thingfish.conf@ which
is expected to be in Ruby's @sysconfdir@ by default. You can point it at a config
file somewhere else with the @-f@ flag:

<pre>
  $ <kbd>thingfishd -f /etc/thingfish.conf</kbd>
</pre>


h3. Configuration File

The config file is a YAML file, and chooses sane values as defaults.  A
minimalistic configuration should look something like this:

<?example { language: yaml, caption: Example minimalistic config file } ?>
---
defaulthandler:
    resource_dir: data/thingfish/web-interface

<?end?>

Because all default storage is in memory, it makes for a nice  "is it working?"
test.  You'll probably want to get more elaborate with your configuration fairly 
quickly, however.

Here's an example of a fairly full-featured config:

<?example { language: yaml, caption: Example comprehensive config file } ?>
---
port: 80
ip: 127.0.0.1
datadir: /home/thingfish
spooldir: /var/tmp
resource_dir: data/thingfish/web-interface
bufsize: 16384
user: daemon
daemon: true
pidfile: thingfish.pid
connection_timeout: 15
pipeline_max: 50
memory_bodysize_max: 256000

profiling:
    enabled: true

logging:
    level: info
    logfile: thingfish.log

plugins:
    filestore:
        name: filesystem
        maxsize: 1073741824
    metastore:
        name: marshalled
    urimap:
        /inspect: inspect
        /upload: formupload
        /metadata: simplemetadata
        /search: simplesearch
    filters:
        - html
        - xml
        - yaml
        - json
        - mp3info
        - exif

<?end?>

The meaning of the config values are as follows:

<dl class="kvlist">
	<dt>port</dt>
	<dd class="description">The port the daemon should listen on.</dd>
	<dd class="default">Defaults to <code>3474</code></dd>

	<dt>ip</dt>
	<dd class="description">The ip the daemon should bind to.</dd>
	<dd class="default">Defaults to <code>0.0.0.0</code></dd>

	<dt>user</dt>
	<dd class="description">The username to run as if we're started as root.</dd>
	<dd class="default">No default</dd>

	<dt>datadir</dt>
	<dd class="description">The location on disk that ThingFish uses to store data files,
		spoolfiles, its pid, and anything.</dd>
	<dd class="default">Defaults to <code>System_Temp_Dir/thingfish</code></dd>

	<dt>spooldir</dt>
	<dd class="description">The location on disk that ThingFish stores temporary files to.
		If set to a relative path, this directory is created under the current
		<strong>datadir</strong>.</dd>
	<dd class="default">Defaults to <code>spool</code> under the <strong>datadir</strong>.</dd>

	<dt>resource_dir</dt>
	<dd class="description">The default location for handlers and filters to find
		files that maybe be required for their use.
	<dd class="default">Defaults to a directory called 
		<code>thingfish/default</code> under Ruby's shared datadir.</dd>

	<dt>bufsize</dt>
	<dd class="description">During file transfers, this option (in bytes)
		controls how much data to buffer to (or from) the client at once.</dd>
	<dd class="default">Defaults to <code>16384</code>, or 16k.</dd>

	<dt>daemon</dt>
	<dd class="description">Either <code>true</code> or <code>false</code>.
	    Whether or not to detach from the controlling terminal.</dd>
	<dd class="default">Defaults to <code>false</code></dd>

	<dt>pidfile</dt>
	<dd class="description">A filename to write the daemon's pid to.  Ignored
	    if daemon mode is not enabled.</dd>
	<dd class="default">No default</dd>

	<dt>connection_timeout</dt>
	<dd class="description">If no activity is seen on a client socket for this
		amount of time (in seconds), the connection is closed.</dd>
	<dd class="default">Defaults to <code>30</code> seconds.</dd>

	<dt>pipeline_max</dt>
	<dd class="description">If a client requests HTTP pipelining via the
		<code>Keep-Alive</code> header, this limits how many requests can be made
		within a single connection.</dd>
	<dd class="default">Defaults to <code>100</code> requests.</dd>

	<dt>memory_bodysize_max</dt>
	<dd class="description">When uploading, keep files under this size (in bytes) in memory
		instead of spooling them to tempfilesp</dd>
	<dd class="default">Defaults to <code>100k</code>.</dd>

	<dt>defaulthandler</dt>
	<dd class="description">This subsection contains configuration values for the 
		top-level handler object of the daemon.</dd>
	<dd class="subsection">
		<dl>
			<dt>html_index</dt>
			<dd class="description">This contains the name of the file to serve by 
				default for requests to the <code>/</code> URI when no content-type 
				is specified.</dd>
			<dd class="default">Defaults to <code>index.rhtml</code></dd>
			
			<dt>resource_dir</dt>
			<dd class="description">The directory to search for static resources 
				relative to the current directory,
			<dd class="default">Defaults to the global @resource_dir@ setting.</dd>
		</dl>
	</dd>
	
	<dt>logging</dt>
	<dd class="description">This section contains the configuration for the logging 
		subsystem.</dd>
	<dd class="subsection">
		<dl>
			<dt>format</dt>
			<dd class="description">A @sprintf@ string to customize the normal logging format.</dd>
			<dd class="valid-values">
				A log message is provided the following arguments (in order):
				<ul>
					<li>The human readable date and time</li>
					<li>Microseconds</li>
					<li>PID of the daemon</li>
					<li>Current thread ID</li>
					<li>Log level</li>
					<li>The ThingFish object that emitted the message</li>
					<li>The message itself</li>
				</ul>
			</dd>
			<dd class="default">
				Defaults to: <code>[%1$s.%2$06d %3$d/%4$s] %5$5s -- %7$s\n</code>
			</dd>

			<dt>debug_format</dt>
			<dd class="description">A @sprintf@ string to customize the debug level logging format.</dd>
			<dd class="valid-values">See @format@ above for the parameter list.</dd>
			<dd class="default">
				Defaults to: <code>[%1$s.%2$06d %3$d/%4$s] %5$5s {%6$s} -- %7$s\n</code>
			</dd>
			
			<dt>level</dt>
			<dd class="description">The level of message that should be logged.</dd>
			<dd class="valid-values">Valid values (in increasing order of severity) 
				are:
				<ul>
					<li><code>debug</code></li>
					<li><code>info</code></li>
					<li><code>warn</code></li>
					<li><code>error</code></li>
					<li><code>fatal</code></li>
				</ul>
			</dd>
			<dd class="default">Defaults to: <code>warn</code></dd>
			
			<dt>logfile</dt>
			<dd class="description">The file or filehandle that logging messages
				should be written to.</dd>
			<dd class="valid-values">May be either one of the special 
				values <code>stderr</code> or <code>stdout</code>, which correspond 
				to the STDERR and STDOUT file descriptors, or a path to a logfile.
				If the path is not absolute, it is relative to the current directory.</dd>
			<dd class="default">Defaults to: <code>stderr</code></dd>
		</dl>
	</dd>
	
	<dt>plugins</dt>
	<dd class="description">This section contains configuration information for any
		plugins you wish to be loaded. It has one section for each type of
		plugin:</dd>
	<dd class="subsection">
		<dl>
			<dt>filestore</dt>
			<dd class="description">Configuration of the plugin which provides the 
				filestore implementation.</dd>
			<dd class="subsection">
				<dl>
					<dt>name</dt>
					<dd class="description">The name of the plugin to load.</dd>
					<dd class="default">Defaults to @memory@</dd>

					<dt class="placeholder">(Plugin-specific values)</dt>
					<dd class="description">See the documentation for your chosen 
						plugin about what valid config values are.</dd>
				</dl>
			</dd>
			
			<dt>metastore</dt>
			<dd class="description">Configuration of the plugin which provides the
				metastore implementation.</dd>
			<dd class="subsection">
				<dl>
					<dt>name</dt>
					<dd class="description">The name of the plugin to load.</dd>
					<dd class="default">Defaults to @memory@</dd>

					<dt class="placeholder">(Plugin-specific values)</dt>
					<dd class="description">See the documentation for your chosen 
						plugin about what valid config values are.</dd>
				</dl>
			</dd>
			
			<dt>filters</dt>
			<dd class="description">Configures which (optional) filters to load.</dd>
			<dd class="subsection">
				<dl>
					<dt>name</dt>
					<dd class="description">The name of the plugin to load.</dd>

					<dt class="placeholder">(Plugin-specific values)</dt>
					<dd class="description">See the documentation for your chosen 
						plugin about what valid config values are.</dd>
				</dl>
			</dd>
			
			<dt>urimap</dt>
			<dd class="description">
				Configuration of any handler plugins you wish to be loaded to
				handle various part of the urispace of the server.  This is in the
				form of a YAML hash, one uri per hash key. Each value has an array
				of plugins that should respond to that particular uri, and the
				plugin's options (if any.) See the documentation for the plugin
				itself for additional values that can be set.  For more information
				about writing handlers, see the
				"Handler":../03.Hackers_Guide/writing-handlers.html documentation.
			</dd>
			<dd class="subsection">
				<dl>
					<dt>Defining a URI mount point</dt>
					<dd class="description">
						<p>The following are all valid methods for defining URI mount
						points for a handler:</p>
<?example { language: yaml, caption: As the only value } ?>
/mount: handlername
<?end?>

<?example { language: yaml, caption: Multiple handlers for a specific mount point } ?>
/mount:
    - handlername
    - anotherhandlername
<?end?>

<?example { language: yaml, caption: A handler with custom options } ?>
/mount:
    - handlername:
        option: value
        another: value
<?end?>
					</dd>
				</dl>
			</dd>
			<dd class="default">The default behaviour is to only handle requests via the
				default handler.</dd>

		</dl>		
	</dd>
</dl>


h2. Running the Server Under Daemontools

ThingFish is designed to optionally co-exist with Dan Bernstein's
"Daemontools":http://cr.yp.to/daemontools.html package, which gives you a lot of
service management and log rotation goodies for free.

h3. Daemontools run File

An example run file that can be used with supervise is included in the ThingFish distribution.
This run file adds the ThingFish and ThingFish plug-in libraries to Ruby's search path
before starting the daemon.  This isn't necessary if you've used RubyGems to install
ThingFish and ThingFish add-ons, but is useful if everything is extracted to a single
directory.

<?example { language: shell-unix-generic, caption: A ThingFish run file for use with supervise } ?>
#!/bin/bash

plugin_libs=(plugins/*/lib)

libflags=''
for libdir in ${plugin_libs[*]}; do
	libflags="-I${libdir} $libflags"
done

exec ruby -Ilib $libflags bin/thingfishd -f etc/thingfish.conf $*
<?end?>

h3. Configuration File

Change the following ThingFish configuration options for best results with supervise.

<dl class="kvlist">
	<dt>daemon</dt>
	<dd class="description">
		The 'supervise' process within Daemontools wants the underlying process to
		run in the foreground.
	<dd class="default">Set this to <code>false</code></dd>
	
	<dt>logging</dt>
	<dd class="subsection">
		<dl>
			<dt>logfile</dt>
			<dd class="description">Daemontools comes with an included logging
				and rotation tool called "multilog.":http://cr.yp.to/daemontools/multilog.html
				Multilog wants to see log data on stdin.  Multilog can also emit timestamps
				in tai64 format, you may optionally want to change the log format (see above)
				to omit the built in timestamps.
			</dd>
			<dd class="default">Set this to <code>stdout</code></dd>
		</dl>
	</dd>
</dl>




