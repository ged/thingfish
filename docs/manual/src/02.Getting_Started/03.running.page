---
title: Running the Server
inMenu: true
---

h2. Running the Server

The server comes with a @thingfishd@ command line program which can be started in 
the usual fashion:

{example: {
  filename: examples/starting-the-server.sh,
  language: shell,
  testable: true,
  caption: Starting the server
  }}

The server reads its configuration from a single file called @thingfish.conf@ which
is expected to be in Ruby's @sysconfdir@ by default. You can point it at a config
file somewhere else with the @-f@ flag:

{example: {
  filename: examples/starting-with-config.sh,
  language: shell,
  testable: true,
  caption: Starting the server with an alternate config file
  }}


h3. Configuration File

The config file is a YAML file, and chooses sane values as defaults.  An absolutely
minimalistic configuration should look something like this:

{example: {filename: examples/etc/tiny-thingfish.conf, 
	escapeHTML: false,
	processOutput: false,
	language: yaml,
	hint: debug,
	testable: true,
	caption: Example minimalistic config file
	 }}

Because all default storage is in memory, it makes for a nice  "is it working?"
test.  You'll probably want to get more elaborate with your configuration fairly 
quickly, however.

{example: {filename: examples/etc/big-thingfish.conf, 
	escapeHTML: false,
	processOutput: false,
	language: yaml,
	hint: debug,
	testable: true,
	caption: Example comprehensive config file
	 }}

The meaning of the config values are as follows:

<dl class="kvlist">
	<dt>port</dt>
	<dd class="description">The port the daemon should listen on.</dd>
	<dd class="default">Defaults to <code>3474</code></dd>
	
	<dt>ip</dt>
	<dd class="description">The ip the daemon should bind to.</dd>
	<dd class="default">Defaults to <code>127.0.0.1</code></dd>
	
	<dt>user</dt>
	<dd class="description">The username to run as if we're started as root.</dd>
	<dd class="default">No default</dd>
	
	<dt>daemon</dt>
	<dd class="description">Either <code>true</code> or <code>false</code>.
	    Whether or not to detach from the controlling terminal.</dd>
	<dd class="default">Defaults to <code>false</code></dd>
	
	<dt>pidfile</dt>
	<dd class="description">A filename to write the daemon's pid to.  Ignored
	    if daemon mode is not enabled.</dd>
	<dd class="default">No default</dd>
	
	<dt>defaulthandler</dt>
	<dd class="description">This subsection contains configuration values for the 
		top-level handler object of the daemon.</dd>
	<dd class="subsection">
		<dl>
			<dt>html_index</dt>
			<dd class="description">This contains the name of the file to serve by 
				default for requests to the <code>/</code> URI when no content-type 
				is specified.</dd>
			<dd class="default">Defaults to <code>index.rhtml</code></dd>
			
			<dt>resource_dir</dt>
			<dd class="description">The directory to search for static resources 
				relative to the , including the <code>html_index</code> file.</dd>
			<dd class="default">Defaults to a directory called 
				<code>thingfish/default</code> under Ruby's shared datadir </dd>
		</dl>
	</dd>
	
	<dt>logging</dt>
	<dd class="description">This section contains the configuration for the logging 
		subsystem.</dd>
	<dd class="subsection">
		<dl>
			<dt>level</dt>
			<dd class="description">The level of message that should be logged.</dd>
			<dd class="valid-values">Valid values (in increasing order of severity) 
				are:
				<ul>
					<li><code>debug</code></li>
					<li><code>info</code></li>
					<li><code>warn</code></li>
					<li><code>error</code></li>
					<li><code>fatal</code></li>
				</ul>
			</dd>
			<dd class="default">Defaults to: <code>warn</code></dd>
			
			<dt>logfile</dt>
			<dd class="description">The file or filehandle that logging messages
				should be written to.</dd>
			<dd class="valid-values">May be either one of the special 
				values <code>stderr</code> or <code>stdout</code>, which correspond 
				to the STDERR and STDOUT file descriptors, or a path to a logfile.
				If the path is not absolute, it is relative to	</dd>
			<dd class="default">Defaults to: <code>stderr</code></dd>
		</dl>
	</dd>
	
	<dt>plugins</dt>
	<dd class="description">This section contains configuration information for any
		plugins you wish to be loaded. It has one section for each type of
		plugin:</dd>
	<dd class="subsection">
		<dl>
			<dt>filestore</dt>
			<dd class="description">Configuration of the plugin which provides the 
				filestore implementation.</dd>
			<dd class="subsection">
				<dl>
					<dt>name</dt>
					<dd class="description">The name of the plugin to load.</dd>
					<dd class="default">Defaults to @memory@</dd>

					<dt class="placeholder">(Plugin-specific values)</dt>
					<dd class="description">See the documentation for your chosen 
						plugin about what valid config values are.</dd>
				</dl>
			</dd>
			
			<dt>metastore</dt>
			<dd class="description">Configuration of the plugin which provides the
				metastore implementation.</dd>
			<dd class="subsection">
				<dl>
					<dt>name</dt>
					<dd class="description">The name of the plugin to load.</dd>
					<dd class="default">Defaults to @memory@</dd>

					<dt class="placeholder">(Plugin-specific values)</dt>
					<dd class="description">See the documentation for your chosen 
						plugin about what valid config values are.</dd>
				</dl>
			</dd>
			
			<dt>filters</dt>
			<dd class="description">Configures which (optional) filters to load.</dd>
			<dd class="subsection">
				<dl>
					<dt>name</dt>
					<dd class="description">The name of the plugin to load.</dd>

					<dt class="placeholder">(Plugin-specific values)</dt>
					<dd class="description">See the documentation for your chosen 
						plugin about what valid config values are.</dd>
				</dl>
			</dd>
			
			<dt>handlers</dt>
			<dd class="description">Configuration of any handler plugins you wish to
				be loaded to handle various part of the urispace of the server. This 
				is in the form of a YAML array of hashes, one plugin per hash. Each 
				hash has the name of the plugin to be loaded as the key, and any 
				plugin-specific configuration is stored in the value. This 
				plugin-specific configuration must contain at least a uri mount
				point. See the documentation for the plugin itself for additional
				values that can be set.  For more information about writing handlers,
				see the <a href="{relocatable:../04.Hackers_Guide/writing-handlers.page}">Handler</a>
				documentation.
			</dd>
			<dd class="subsection">
				<dl>
					<dt>Defining a URI mount point</dt>
					<dd class="description">
						<p>The following are all valid methods for defining URI mount
						points for a handler:</p>
						<pre>
- handlername: /mount

- handlername:
    uris: /mount

- handlername:
    uris: [/mount, /mount2]
						</pre>
					</dd>
				</dl>
			</dd>
			<dd class="default">The default is to only handle requests via the default
				handler.</dd>

		</dl>		
	</dd>
</dl>

