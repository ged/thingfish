Title:        A Gentle Introduction to ThingFish
Location:     LJC South Screening Room
Presenter:    Michael Granger and Mahlon E. Smith
Organization: LAIKA, Inc.
Date:         January 30, 2008
Theme:        laika

A Gentle Introduction to ThingFish
==================================

* What is it?
* Why would I want to use it?
* Why not S3? MogileFS? CouchDB?
* Design/Features
* Demo

✂------✂------✂------✂------✂------✂------✂------✂------✂------✂------

What Is It?
===========
ThingFish is:
-------------

* A highly-accessible network datastore
* Written for LAIKA IT/Information Services
* Released as Open Source

✂------✂------✂------✂------✂------✂------✂------✂------✂------✂------

Why Would I Want To Use It?
===========================

You might want to use it if:
---------------------------

* You're writing network applications that shuffle large chunks of data around
  - Many parts, loosely coupled
  - Blackboard design pattern -- one store, many consumers/manipulators
* You need a datastore that's accessible from many languages or environments
  - Different languages and platforms
  - Ubiquitous network protocol
* You need a backend for automated cataloging/transformation
  - Many collectors, one central store
  - Metadata consistency

__________

For example:

- You have a network application that grabs big chunks of data, modifies 
  it, then stores it again.

- You want people to be able to use the data you create/modify from any language,
  from anywhere on the network.

- You want the data you upload to be automatically catalogued, and then want to be
  able to fetch it in various formats later without having to pre-populate the store
  with every variant.

✂------✂------✂------✂------✂------✂------✂------✂------✂------✂------

Why Not Something Off the Shelf?
================================

MogileFS
--------

* First thing we considered, given our prior experience with it
* Inflexible
* Poorly-defined amalgam of custom and existing protocols
* Too much up-front complexity
  - Load-balancing
  - Replication

✂------✂------✂------✂------✂------✂------✂------✂------✂------✂------

Why Not Something Off the Shelf?
================================

Amazon's S3
-----------

* Needed something local
* Needed more metadata
* External authentication source

✂------✂------✂------✂------✂------✂------✂------✂------✂------✂------

Why Not Something Off the Shelf?
================================

CouchDB
-------

* Written in Erlang
* 2Gb data limit
* Slightly different philosophy (enough to matter)


✂------✂------✂------✂------✂------✂------✂------✂------✂------✂------

Design/Features
===============

Design Principles
-----------------

* Simplicity
  - Architecture
  - Minimal Dependencies

* Modularity 
  — Extensible via plugin

* Language-Agnostic API
  — HTTP/REST

__________

Client access should require as little application specific knowledge as possible. We can't
anticipate our future use cases for searching and fetching data, but will be initially using it from
within a web browser (Javascript) and from command-line programs (Ruby, Perl, Python) at a minimum.
Writing a client should be straightforward for any language that provides a an HTTP client library.

✂------✂------✂------✂------✂------✂------✂------✂------✂------✂------

Demo
====

Clicky: [http://gont.ljc.laika.com:3474/](http://gont.ljc.laika.com:3474/)
