---
title: Similar Systems
directoryName: Introduction
inMenu: true
---

h2. Similar Systems

We considered several other systems which provide network data storage before we
decided to write ThingFish. Both Amazon's S3 and Danga's MogileFS provide the ability
to store and retrieve chunks of data through a network interface, but there were
features or limitations of each that made them unsuitable for our use.


h3. "Amazon S3":http://aws.amazon.com/s3

Amazon's Simple Storage Service is probably the closest thing we've found to what we
need, but there are some limitations which it imposes which we couldn't live with:

<dl>
  	<dt>Metadata restrictions</dt>
  	<dd>We can't anticipate everything that we'd want to store as metadata, but we
	    predict that it will be nearly as important as the file data itself. We want 
		to store relations between files, summaries, ACLs, and other information 
		which will easily not only exceed S3's current 2k limitation, but also 
		require a rich set of operations independent of file data. S3's metadata is 
		intimately coupled with the files themselves, and there is no facility for 
		interacting with the metadata separately.</dd>

  	<dt>Hosted on Amazon's Servers</dt>
	<dd>Because some of the data we're storing is highly sensitive (e.g., shots of 
		movies and commercials which are still in production, personnel data, etc.),
		we couldn't store data outside of our local network.</dd>
	<dd>We also anticipate needing to store many very large chunks of data which
		will need to be retrieved quickly, so we needed to stay within our own
		local network for speed.</dd>

 	<dt>Authentication</dt>
	<dd>All of our authentication/authorization is done using our LDAP directory, and
		we couldn't figure out a way to be able to leverage our existing single 
		sign-on to control access to S3 data.</dd>
</dl>


h3. "MogileFS":http://www.danga.com/mogilefs/

MogileFS is Danga Interactive's distributed filesystem. Since both of us worked for
Danga at LiveJournal, this was the first thing we considered. After testing it out,
and based on our experiences at LiveJournal, we decided that it didn't mesh with our
requirements:

<dl>
	<dt>Inflexible</dt>
	<dd>MogileFS was invented as a "cheap (open source) spray-files-everywhere 
		solution" at the expense of flexibility, portability, and ease of use. While
		some strides have been made to make it more-generally useful, it's still
		best suited for the environments which most closely match the problems that
		Danga was trying to solve when they wrote it, an environment which is
		significantly different than our own.</dd>
	
	<dt>Custom Protocol</dt>
	<dd>At the most basic level, the MogileFS storage nodes speak simple HTTP, but
		because MogileFS also does replication and load-balancing in its protocol, 
		writing a client for it is a bit more complex than we wanted.</dd>

	<dt>Complexity</dt>
	<dd>Because it does replication and load-balancing itself, MogileFS has a few
		more moving parts than we think is necessary. We'd like to support those
		things as well, but we want to defer their implementation until they're 
		needed. We'd also like to be able to leverage existing orthogonal solutions 
		for load-balancing and replication when they become necessary rather than
		being forced into the one that's imposed on the system out of the box.</dd>

</dl>
